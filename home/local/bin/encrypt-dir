#!/usr/bin/env bash

PROGRAM="$(basename "${0}")"

if ((${BASH_VERSION%%.*} < 4)); then
	echo "${PROGRAM}: requires Bash version 4 or later" >&2
	exit 1
fi

set -euo pipefail

if ! [ "$#" -eq 1 ]; then
	echo "${PROGRAM}: expecting a single argument with the directory path" >&2
	exit 1
fi

if ! [ -x "$(command -v gpg)" ]; then
	echo "${PROGRAM}: gpg not found" >&2
	exit 1
fi

if ! [ -x "$(command -v pv)" ]; then
	echo "${PROGRAM}: pv not found" >&2
	exit 1
fi

DIR_NAME="$(basename "${1}")"
PARENT_DIR="$(dirname "$(realpath "${1}")")"
DIR_PATH="${PARENT_DIR}/${DIR_NAME}"
OUTPUT_PATH="$(basename "${DIR_NAME}").tar.gz.gpg"

if ! [ -d "${DIR_PATH}" ]; then
	echo "${PROGRAM}: ${DIR_PATH} is not a directory" >&2
	exit 1
fi

DIR_SIZE="$(du -hs "${DIR_PATH}" 2>/dev/null | cut -f1)" || true

echo "Encrypting directory ${DIR_PATH} (${DIR_SIZE})" >&2

read -s -p "Enter passphrase: " passphrase
echo
read -s -p "Repeat passphrase: " passphrase_repeat
echo
if ! [ "${passphrase}" = "${passphrase_repeat}" ]; then
	echo "${PROGRAM}: passphrases do not match" >&2
	exit 1
fi
unset passphrase_repeat

tar \
	--create --gzip --format=posix \
	--preserve-permissions --same-owner \
	--ignore-failed-read \
	--directory "${PARENT_DIR}/" \
	--to-stdout "${DIR_NAME}" \
	| pv --wait --delay-start 2 \
	| gpg \
	--symmetric \
	--pinentry-mode loopback \
	--passphrase "${passphrase}" \
	--output "${OUTPUT_PATH}"

unset passphrase

OUTPUT_SIZE="$(du -h "${OUTPUT_PATH}" | cut -f -1)"

echo "Wrote encrypted archive to ${OUTPUT_PATH} (${OUTPUT_SIZE})" >&2
